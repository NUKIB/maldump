import json
from datetime import datetime as dt
from typing import List

from maldump.structures import QuarEntry
from maldump.utils import CustomArc4


class MalwarebytesParser:
    def _decrypt(self, input):
        key = [
            0x03,
            0x7A,
            0x55,
            0xC5,
            0xDF,
            0x39,
            0xD2,
            0x89,
            0x7F,
            0xEF,
            0x88,
            0x3D,
            0xC0,
            0x47,
            0xB3,
            0x17,
        ]
        return CustomArc4(key).decode(input)

    def _normalize_time(self, date):
        return dt.strptime(date, "%Y-%m-%dT%H:%M:%SZ")

    def from_file(self, name, location) -> List[QuarEntry]:
        self.name = name
        self.location = location
        quarfiles = []

        for metafile in self.location.glob("*.data"):
            with open(metafile, "rb") as f:
                decrypted = self._decrypt(f.read())
            metadata = json.loads(decrypted)

            # Open corresponding malfile
            uid = metadata["trace"]["objectID"]
            with open(self.location / (uid + ".quar"), "rb") as f:
                malfile = self._decrypt(f.read())

            q = QuarEntry()
            q.timestamp = self._normalize_time(metadata["trace"]["cleanTime"])
            q.threat = metadata["threatName"]
            q.path = metadata["trace"]["objectPath"]
            q.size = len(malfile)
            q.md5 = metadata["trace"]["objectMD5"].lower()
            q.malfile = malfile
            quarfiles.append(q)

        return quarfiles
