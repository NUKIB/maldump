from __future__ import annotations

import json
from datetime import datetime
from typing import TYPE_CHECKING, Optional

from maldump.structures import QuarEntry, Parser
from maldump.utils import CustomArc4
from maldump.utils import DatetimeConverter as DTC

if TYPE_CHECKING:
    from pathlib import Path


class MalwarebytesParser(Parser):
    def _decrypt(self, plaintext: bytes) -> bytes:
        key = [
            0x03,
            0x7A,
            0x55,
            0xC5,
            0xDF,
            0x39,
            0xD2,
            0x89,
            0x7F,
            0xEF,
            0x88,
            0x3D,
            0xC0,
            0x47,
            0xB3,
            0x17,
        ]
        return CustomArc4(key).decode(plaintext)

    def _normalize_time(self, date: datetime) -> str:
        return datetime.strptime(date, "%Y-%m-%dT%H:%M:%SZ")

    def parse_from_log(
        self, data: Optional[dict[str, QuarEntry]] = None
    ) -> dict[str, QuarEntry]:
        quarfiles = {}

        for metafile in self.location.glob("*.data"):
            with open(metafile, "rb") as f:
                decrypted = self._decrypt(f.read())
            metadata = json.loads(decrypted)

            # Open corresponding malfile
            uid = metadata["trace"]["objectID"]
            with open(self.location / (uid + ".quar"), "rb") as f:
                malfile = self._decrypt(f.read())

            q = QuarEntry()
            q.timestamp = self._normalize_time(metadata["trace"]["cleanTime"])
            q.threat = metadata["threatName"]
            q.path = metadata["trace"]["objectPath"]
            q.md5 = metadata["trace"]["objectMD5"].lower()
            q.malfile = malfile
            quarfiles[uid] = q

        return quarfiles

    def parse_from_fs(
        self, data: Optional[dict[str, QuarEntry]] = None
    ) -> dict[str, QuarEntry]:
        quarfiles = {}

        for entry in self.location.glob("*.quar"):
            if not entry.is_file():
                continue

            uid = entry.name.rstrip(".quar")
            if uid in data:
                continue

            entry_stat = entry.stat()
            timestamp = DTC.get_dt_from_stat(entry_stat)
            size = entry_stat.st_size

            with open(entry, "rb") as f:
                malfile = self._decrypt(f.read())

            q = QuarEntry()
            q.path = str(entry)
            q.timestamp = timestamp
            q.size = size
            q.threat = "Unknown-no-metadata"
            q.malfile = malfile
            quarfiles[uid] = q

        return quarfiles
